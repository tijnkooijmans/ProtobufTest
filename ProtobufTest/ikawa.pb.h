// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ikawa.proto

#ifndef PROTOBUF_ikawa_2eproto__INCLUDED
#define PROTOBUF_ikawa_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ikawa {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ikawa_2eproto();
void protobuf_AssignDesc_ikawa_2eproto();
void protobuf_ShutdownFile_ikawa_2eproto();

class MachineStatus;

enum MachineStatus_State {
  MachineStatus_State_IDLE = 0,
  MachineStatus_State_HEATING = 1,
  MachineStatus_State_READY = 2,
  MachineStatus_State_ROASTING = 3,
  MachineStatus_State_BUSY = 4,
  MachineStatus_State_COOLING = 5,
  MachineStatus_State_OPEN = 6,
  MachineStatus_State_PROBLEM = 9
};
bool MachineStatus_State_IsValid(int value);
const MachineStatus_State MachineStatus_State_State_MIN = MachineStatus_State_IDLE;
const MachineStatus_State MachineStatus_State_State_MAX = MachineStatus_State_PROBLEM;
const int MachineStatus_State_State_ARRAYSIZE = MachineStatus_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* MachineStatus_State_descriptor();
inline const ::std::string& MachineStatus_State_Name(MachineStatus_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    MachineStatus_State_descriptor(), value);
}
inline bool MachineStatus_State_Parse(
    const ::std::string& name, MachineStatus_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MachineStatus_State>(
    MachineStatus_State_descriptor(), name, value);
}
// ===================================================================

class MachineStatus : public ::google::protobuf::Message {
 public:
  MachineStatus();
  virtual ~MachineStatus();

  MachineStatus(const MachineStatus& from);

  inline MachineStatus& operator=(const MachineStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineStatus& default_instance();

  void Swap(MachineStatus* other);

  // implements Message ----------------------------------------------

  MachineStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MachineStatus& from);
  void MergeFrom(const MachineStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MachineStatus_State State;
  static const State IDLE = MachineStatus_State_IDLE;
  static const State HEATING = MachineStatus_State_HEATING;
  static const State READY = MachineStatus_State_READY;
  static const State ROASTING = MachineStatus_State_ROASTING;
  static const State BUSY = MachineStatus_State_BUSY;
  static const State COOLING = MachineStatus_State_COOLING;
  static const State OPEN = MachineStatus_State_OPEN;
  static const State PROBLEM = MachineStatus_State_PROBLEM;
  static inline bool State_IsValid(int value) {
    return MachineStatus_State_IsValid(value);
  }
  static const State State_MIN =
    MachineStatus_State_State_MIN;
  static const State State_MAX =
    MachineStatus_State_State_MAX;
  static const int State_ARRAYSIZE =
    MachineStatus_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return MachineStatus_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return MachineStatus_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return MachineStatus_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float temps = 1;
  inline int temps_size() const;
  inline void clear_temps();
  static const int kTempsFieldNumber = 1;
  inline float temps(int index) const;
  inline void set_temps(int index, float value);
  inline void add_temps(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      temps() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_temps();

  // repeated float fanSpeeds = 2;
  inline int fanspeeds_size() const;
  inline void clear_fanspeeds();
  static const int kFanSpeedsFieldNumber = 2;
  inline float fanspeeds(int index) const;
  inline void set_fanspeeds(int index, float value);
  inline void add_fanspeeds(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      fanspeeds() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_fanspeeds();

  // repeated float timeIntoRoasts = 3;
  inline int timeintoroasts_size() const;
  inline void clear_timeintoroasts();
  static const int kTimeIntoRoastsFieldNumber = 3;
  inline float timeintoroasts(int index) const;
  inline void set_timeintoroasts(int index, float value);
  inline void add_timeintoroasts(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      timeintoroasts() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_timeintoroasts();

  // optional .ikawa.MachineStatus.State state = 4 [default = IDLE];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::ikawa::MachineStatus_State state() const;
  inline void set_state(::ikawa::MachineStatus_State value);

  // @@protoc_insertion_point(class_scope:ikawa.MachineStatus)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > temps_;
  ::google::protobuf::RepeatedField< float > fanspeeds_;
  ::google::protobuf::RepeatedField< float > timeintoroasts_;
  int state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ikawa_2eproto();
  friend void protobuf_AssignDesc_ikawa_2eproto();
  friend void protobuf_ShutdownFile_ikawa_2eproto();

  void InitAsDefaultInstance();
  static MachineStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// MachineStatus

// repeated float temps = 1;
inline int MachineStatus::temps_size() const {
  return temps_.size();
}
inline void MachineStatus::clear_temps() {
  temps_.Clear();
}
inline float MachineStatus::temps(int index) const {
  return temps_.Get(index);
}
inline void MachineStatus::set_temps(int index, float value) {
  temps_.Set(index, value);
}
inline void MachineStatus::add_temps(float value) {
  temps_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MachineStatus::temps() const {
  return temps_;
}
inline ::google::protobuf::RepeatedField< float >*
MachineStatus::mutable_temps() {
  return &temps_;
}

// repeated float fanSpeeds = 2;
inline int MachineStatus::fanspeeds_size() const {
  return fanspeeds_.size();
}
inline void MachineStatus::clear_fanspeeds() {
  fanspeeds_.Clear();
}
inline float MachineStatus::fanspeeds(int index) const {
  return fanspeeds_.Get(index);
}
inline void MachineStatus::set_fanspeeds(int index, float value) {
  fanspeeds_.Set(index, value);
}
inline void MachineStatus::add_fanspeeds(float value) {
  fanspeeds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MachineStatus::fanspeeds() const {
  return fanspeeds_;
}
inline ::google::protobuf::RepeatedField< float >*
MachineStatus::mutable_fanspeeds() {
  return &fanspeeds_;
}

// repeated float timeIntoRoasts = 3;
inline int MachineStatus::timeintoroasts_size() const {
  return timeintoroasts_.size();
}
inline void MachineStatus::clear_timeintoroasts() {
  timeintoroasts_.Clear();
}
inline float MachineStatus::timeintoroasts(int index) const {
  return timeintoroasts_.Get(index);
}
inline void MachineStatus::set_timeintoroasts(int index, float value) {
  timeintoroasts_.Set(index, value);
}
inline void MachineStatus::add_timeintoroasts(float value) {
  timeintoroasts_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MachineStatus::timeintoroasts() const {
  return timeintoroasts_;
}
inline ::google::protobuf::RepeatedField< float >*
MachineStatus::mutable_timeintoroasts() {
  return &timeintoroasts_;
}

// optional .ikawa.MachineStatus.State state = 4 [default = IDLE];
inline bool MachineStatus::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MachineStatus::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MachineStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MachineStatus::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::ikawa::MachineStatus_State MachineStatus::state() const {
  return static_cast< ::ikawa::MachineStatus_State >(state_);
}
inline void MachineStatus::set_state(::ikawa::MachineStatus_State value) {
  assert(::ikawa::MachineStatus_State_IsValid(value));
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ikawa

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ikawa::MachineStatus_State>() {
  return ::ikawa::MachineStatus_State_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ikawa_2eproto__INCLUDED
