// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ikawa.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ikawa.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ikawa {

namespace {

const ::google::protobuf::Descriptor* MachineStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MachineStatus_State_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ikawa_2eproto() {
  protobuf_AddDesc_ikawa_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ikawa.proto");
  GOOGLE_CHECK(file != NULL);
  MachineStatus_descriptor_ = file->message_type(0);
  static const int MachineStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineStatus, temps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineStatus, fanspeeds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineStatus, timeintoroasts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineStatus, state_),
  };
  MachineStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineStatus_descriptor_,
      MachineStatus::default_instance_,
      MachineStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineStatus));
  MachineStatus_State_descriptor_ = MachineStatus_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ikawa_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineStatus_descriptor_, &MachineStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ikawa_2eproto() {
  delete MachineStatus::default_instance_;
  delete MachineStatus_reflection_;
}

void protobuf_AddDesc_ikawa_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013ikawa.proto\022\005ikawa\"\341\001\n\rMachineStatus\022\r"
    "\n\005temps\030\001 \003(\002\022\021\n\tfanSpeeds\030\002 \003(\002\022\026\n\016time"
    "IntoRoasts\030\003 \003(\002\022/\n\005state\030\004 \001(\0162\032.ikawa."
    "MachineStatus.State:\004IDLE\"e\n\005State\022\010\n\004ID"
    "LE\020\000\022\013\n\007HEATING\020\001\022\t\n\005READY\020\002\022\014\n\010ROASTING"
    "\020\003\022\010\n\004BUSY\020\004\022\013\n\007COOLING\020\005\022\010\n\004OPEN\020\006\022\013\n\007P"
    "ROBLEM\020\t", 248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ikawa.proto", &protobuf_RegisterTypes);
  MachineStatus::default_instance_ = new MachineStatus();
  MachineStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ikawa_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ikawa_2eproto {
  StaticDescriptorInitializer_ikawa_2eproto() {
    protobuf_AddDesc_ikawa_2eproto();
  }
} static_descriptor_initializer_ikawa_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MachineStatus_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineStatus_State_descriptor_;
}
bool MachineStatus_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MachineStatus_State MachineStatus::IDLE;
const MachineStatus_State MachineStatus::HEATING;
const MachineStatus_State MachineStatus::READY;
const MachineStatus_State MachineStatus::ROASTING;
const MachineStatus_State MachineStatus::BUSY;
const MachineStatus_State MachineStatus::COOLING;
const MachineStatus_State MachineStatus::OPEN;
const MachineStatus_State MachineStatus::PROBLEM;
const MachineStatus_State MachineStatus::State_MIN;
const MachineStatus_State MachineStatus::State_MAX;
const int MachineStatus::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MachineStatus::kTempsFieldNumber;
const int MachineStatus::kFanSpeedsFieldNumber;
const int MachineStatus::kTimeIntoRoastsFieldNumber;
const int MachineStatus::kStateFieldNumber;
#endif  // !_MSC_VER

MachineStatus::MachineStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineStatus::InitAsDefaultInstance() {
}

MachineStatus::MachineStatus(const MachineStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineStatus::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineStatus::~MachineStatus() {
  SharedDtor();
}

void MachineStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MachineStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineStatus_descriptor_;
}

const MachineStatus& MachineStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ikawa_2eproto();
  return *default_instance_;
}

MachineStatus* MachineStatus::default_instance_ = NULL;

MachineStatus* MachineStatus::New() const {
  return new MachineStatus;
}

void MachineStatus::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    state_ = 0;
  }
  temps_.Clear();
  fanspeeds_.Clear();
  timeintoroasts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float temps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_temps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_temps())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_temps())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_temps;
        if (input->ExpectTag(21)) goto parse_fanSpeeds;
        break;
      }

      // repeated float fanSpeeds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fanSpeeds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_fanspeeds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fanspeeds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_fanSpeeds;
        if (input->ExpectTag(29)) goto parse_timeIntoRoasts;
        break;
      }

      // repeated float timeIntoRoasts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_timeIntoRoasts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_timeintoroasts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_timeintoroasts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_timeIntoRoasts;
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .ikawa.MachineStatus.State state = 4 [default = IDLE];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ikawa::MachineStatus_State_IsValid(value)) {
            set_state(static_cast< ::ikawa::MachineStatus_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float temps = 1;
  for (int i = 0; i < this->temps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->temps(i), output);
  }

  // repeated float fanSpeeds = 2;
  for (int i = 0; i < this->fanspeeds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->fanspeeds(i), output);
  }

  // repeated float timeIntoRoasts = 3;
  for (int i = 0; i < this->timeintoroasts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->timeintoroasts(i), output);
  }

  // optional .ikawa.MachineStatus.State state = 4 [default = IDLE];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float temps = 1;
  for (int i = 0; i < this->temps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->temps(i), target);
  }

  // repeated float fanSpeeds = 2;
  for (int i = 0; i < this->fanspeeds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->fanspeeds(i), target);
  }

  // repeated float timeIntoRoasts = 3;
  for (int i = 0; i < this->timeintoroasts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->timeintoroasts(i), target);
  }

  // optional .ikawa.MachineStatus.State state = 4 [default = IDLE];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .ikawa.MachineStatus.State state = 4 [default = IDLE];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated float temps = 1;
  {
    int data_size = 0;
    data_size = 4 * this->temps_size();
    total_size += 1 * this->temps_size() + data_size;
  }

  // repeated float fanSpeeds = 2;
  {
    int data_size = 0;
    data_size = 4 * this->fanspeeds_size();
    total_size += 1 * this->fanspeeds_size() + data_size;
  }

  // repeated float timeIntoRoasts = 3;
  {
    int data_size = 0;
    data_size = 4 * this->timeintoroasts_size();
    total_size += 1 * this->timeintoroasts_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineStatus::MergeFrom(const MachineStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  temps_.MergeFrom(from.temps_);
  fanspeeds_.MergeFrom(from.fanspeeds_);
  timeintoroasts_.MergeFrom(from.timeintoroasts_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineStatus::CopyFrom(const MachineStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineStatus::IsInitialized() const {

  return true;
}

void MachineStatus::Swap(MachineStatus* other) {
  if (other != this) {
    temps_.Swap(&other->temps_);
    fanspeeds_.Swap(&other->fanspeeds_);
    timeintoroasts_.Swap(&other->timeintoroasts_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineStatus_descriptor_;
  metadata.reflection = MachineStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ikawa

// @@protoc_insertion_point(global_scope)
